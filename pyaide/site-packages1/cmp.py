
import jedi
import json
import traceback

import sys
import os

def suggestForCode(code, index, path, get_definitions=False):
    visibleEditor = {}
    try:
        script = jedi.Script(code, path=path)

        if get_definitions:
            definitions = []
            for _def in script.get_names():
            
                if _def.type == "statement" or _def.type == "keyword":
                    continue
            
                decl = _def.description
                line = _def.line
                if "=" in decl:
                    decl = decl.split("=")[0]
                if ":" in decl:
                    decl = decl.split(":")[0]
                
                signatures = []
                for signature in _def.get_signatures():
                    signatures.append(signature.to_string())
                
                defined_names = []
                try:
                    for name in _def.defined_names():
                
                        if not name.is_definition():
                            continue
                    
                        _signatures = []
                        for signature in name.get_signatures():
                            _signatures.append(signature.to_string())
                    
                        defined_names.append([name.description, name.line, name.docstring(raw=True), name.name, _signatures, [], name.module_name, name.type])
                except NotImplementedError:
                    pass
                
                definitions.append([decl, line, _def.docstring(raw=True), _def.name, signatures, defined_names, _def.module_name, _def.type])

            visibleEditor["definitions"] = definitions

        suggestions = []
        completions = []

        docs = {}

        line = 1
        column = 0

        for i in range(index):
            char = code[i]
            if char == "\n":
                line += 1
                column = 0
            else:
                column += 1

        signature = ""

        infer = script.infer(line, column)
        for _infer in infer:
            for __infer in _infer.get_signatures():
                signature = __infer.to_string()
                break
            break

        if signature == "":
            context = script.get_context(line, column)
            for _signature in context.get_signatures():
                signature = _signature.to_string()
                break

        types = {}
        signatures = {}


        param_suggestions = []
        param_completions = []

        fuzzy_suggestions = []
        fuzzy_completions = []

        _completions = script.complete(line, column)
        _fuzzy_completions = script.complete(line, column, fuzzy=True)

        completion_objects = _completions+_fuzzy_completions

        for completion in completion_objects:
            suggestion = completion.name

            if suggestion in suggestions or suggestion in param_suggestions or suggestion in fuzzy_suggestions:
                continue

            complete = completion.complete
            if complete is None:
                complete = suggestion

            if complete.startswith("."):
                suggestion = "." + suggestion
            
            if complete.endswith("="):
                complete = complete[:-1]

            if completion._is_fuzzy:
                complete = "__is_fuzzy__"
                fuzzy_suggestions.append(suggestion)
                fuzzy_completions.append(complete)
            elif not suggestion.endswith("="):
                suggestions.append(suggestion)
                completions.append(complete)
            else:
                param_suggestions.append(suggestion)
                param_completions.append(complete)

            #docstring = completion.docstring(raw=True, fast=True)
            docstring = ""
            types[suggestion] = completion.type

            #for _signature in completion.get_signatures():
            #    if _signature.to_string() == "NoneType()":
            #        continue

            #    signatures[suggestion] = _signature.to_string()
            
            signatures[suggestion] = ""
            
            try:
                lines = docstring.split("\n")
                if lines[0].endswith(")") and lines[0].startswith(suggestion):
                    lines.pop(0)

                while len(lines) > 0 and lines[0] == "":
                    lines.pop(0)
                
                docstring = "\n".join(lines)
            except IndexError:
                pass

            docs[suggestion] = docstring
        
        suggestions = param_suggestions+suggestions+fuzzy_suggestions
        completions = param_completions+completions+fuzzy_completions

        visibleEditor["signature"] = signature
        visibleEditor["suggestionsType"] = types
        visibleEditor["completions"] = completions
        visibleEditor["suggestions"] = suggestions
        visibleEditor["docStrings"] = docs
        visibleEditor["signatures"] = signatures

    except Exception as e:

        #sys.__stdout__.write("Code completion:\n " + traceback.format_exc() + "\n")
        print(e)
        print(traceback.format_exc()+"\n")

        if visibleEditor is None:
            return

        visibleEditor["completions"] = []
        visibleEditor["suggestions"] = []
        visibleEditor["signature"] = ""
        visibleEditor["docStrings"] = None
        
    return visibleEditor

#
#if __name__ == '__main__':
#    stdout = sys.stdout
##    sys.stdout = open(os.devnull, 'w')
#    vid = sys.argv[1]
#    path = sys.argv[2]
#    index = int(sys.argv[3])
#    getdef = bool(sys.argv[4])
#    code = ""
#    with open(path, "r") as f:
#        code = f.read()
#    if (code == ""):
#        stdout.write("")
#    else:
#        result = suggestForCode(code, index, path, get_definitions=getdef)
#        result["vid"] = vid
#        stdout.write(json.dumps(result))

result = suggestForCode("p", 1, "m.py", False)
print(json.dumps(result))

